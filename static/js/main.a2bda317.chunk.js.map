{"version":3,"sources":["components/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todo","task","completeTask","taskName","deadline","onClick","App","useState","setTask","setDeadline","todo","setTodo","handleChange","e","target","name","value","Number","taskNameToDelete","filter","className","type","placeholder","onChange","newTask","console","log","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAoBeA,EAZS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,aAC5B,OACI,gCACI,gCACI,+BAAOD,EAAKE,WACZ,+BAAOF,EAAKG,cAEhB,wBAAQC,QAAS,WAAOH,EAAaD,EAAKE,WAA1C,mBCiCGG,EA3CC,WAEd,MAAwBC,mBAAiB,IAAzC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAAgCD,mBAAiB,GAAjD,mBAAOH,EAAP,KAAiBK,EAAjB,KACA,EAAwBF,mBAAkB,IAA1C,mBAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAe,SAACC,GACE,SAAlBA,EAAEC,OAAOC,KACXP,EAAQK,EAAEC,OAAOE,OAEjBP,EAAYQ,OAAOJ,EAAEC,OAAOE,SAG1Bd,EAAe,SAACgB,GACpBP,EAAQD,EAAKS,QAAO,SAAClB,GACnB,OAAOA,EAAKE,WAAae,OAU7B,OACE,sBAAKE,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,kBAAf,UACE,uBAAOC,KAAK,OAAOC,YAAY,UAAUC,SAAUX,EAAcG,KAAK,OAAOC,MAAOf,IACpF,uBAAOoB,KAAK,SAASC,YAAY,wBAAwBC,SAAUX,EAAcG,KAAK,WAAWC,MAAOZ,OAE1G,wBAAQC,QAbE,WACd,IAAMmB,EAAU,CAACrB,SAAUF,EAAMG,SAAUA,GAC3CO,EAAQ,GAAD,mBAAKD,GAAL,CAAWc,KAClBC,QAAQC,IAAIhB,IAUR,yBAEF,qBAAKU,UAAU,WAAf,SACGV,EAAKiB,KAAI,SAAC1B,EAAa2B,GACtB,OAAO,cAAC,EAAD,CAAgB3B,KAAMA,EAAMC,aAAcA,GAA/B0B,YC3BbC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2bda317.chunk.js","sourcesContent":["import React, { FC} from 'react';\r\nimport {ITask} from '../Interfaces';\r\n\r\ninterface Props {\r\n    task: ITask;\r\n    completeTask(taskNameToDelete: string): void;\r\n}\r\n\r\nconst Todo: FC<Props> = ({task, completeTask}: Props) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <span>{task.taskName}</span>\r\n                <span>{task.deadline}</span>\r\n            </div>\r\n            <button onClick={() => {completeTask(task.taskName)}}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { FC, useState, ChangeEvent } from 'react';\nimport './App.css';\nimport {ITask} from './Interfaces';\nimport Todo from './components/Todo';\n\nconst App: FC = () => {\n\n  const [task, setTask] = useState<string>('');\n  const [deadline, setDeadline] = useState<number>(0);\n  const [todo, setTodo] = useState<ITask[]>([]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    if (e.target.name === 'task')\n      setTask(e.target.value)\n    else\n      setDeadline(Number(e.target.value));\n  };\n\n  const completeTask = (taskNameToDelete: string): void => {\n    setTodo(todo.filter((task) => {\n      return task.taskName !== taskNameToDelete\n    }))\n  };\n\n  const addTask = (): void => {\n    const newTask = {taskName: task, deadline: deadline};\n    setTodo([...todo, newTask]);\n    console.log(todo);\n  }\n\n  return (\n    <div className='App'>\n      <div className='header'>\n        <div className='input-container'>\n          <input type='text' placeholder='Task...' onChange={handleChange} name='task' value={task} />\n          <input type='number' placeholder='Deadline (in days)...' onChange={handleChange} name='deadline' value={deadline} />\n        </div>\n        <button onClick={addTask}>Add Task</button>\n      </div>\n      <div className='todoList'>\n        {todo.map((task: ITask, key: number) => {\n          return <Todo key={key} task={task} completeTask={completeTask} />\n        })}        \n      </div>\n    </div>\n  )\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}